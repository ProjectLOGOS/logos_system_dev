import pandas as pd
from pathlib import Path
import json
from typing import Dict, List, Union, Optional
from datetime import datetime
import logging

class BayesianDataHandler:
    def __init__(self, data_dir: str = "data/bayesian_ml"):
        self.data_dir = Path(data_dir)
        self.predictions_file = self.data_dir / "predictions.csv"
        self.metadata_file = self.data_dir / "metadata.json"
        self.initialize_data_storage()
        
    def initialize_data_storage(self) -> None:
        """Initialize data storage structure"""
        self.data_dir.mkdir(parents=True, exist_ok=True)
        
        if not self.predictions_file.exists():
            pd.DataFrame(columns=[
                'timestamp', 'prediction', 'confidence', 
                'variance', 'hypothesis', 'evidence'
            ]).to_csv(self.predictions_file, index=False)
            
        if not self.metadata_file.exists():
            metadata = {
                'model_version': '1.0',
                'last_updated': datetime.now().isoformat(),
                'performance_metrics': {},
                'model_parameters': {}
            }
            self.save_metadata(metadata)

    def save_prediction(self, prediction: BayesianPrediction, hypothesis: str) -> None:
        """Save prediction results to CSV"""
        prediction_data = {
            'timestamp': prediction.timestamp,
            'prediction': prediction.prediction,
            'confidence': prediction.confidence,
            'variance': prediction.variance,
            'hypothesis': hypothesis,
            'evidence': json.dumps(prediction.metadata['evidence'])
        }
        
        df = pd.DataFrame([prediction_data])
        df.to_csv(self.predictions_file, mode='a', header=False, index=False)

    def get_predictions(self, 
                       start_date: Optional[str] = None,
                       end_date: Optional[str] = None,
                       min_confidence: float = 0.0) -> pd.DataFrame:
        """Retrieve predictions within specified parameters"""
        df = pd.read_csv(self.predictions_file)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        
        if start_date:
            df = df[df['timestamp'] >= pd.to_datetime(start_date)]
        if end_date:
            df = df[df['timestamp'] <= pd.to_datetime(end_date)]
        if min_confidence > 0:
            df = df[df['confidence'] >= min_confidence]
            
        return df

    def save_metadata(self, metadata: Dict) -> None:
        """Save metadata to JSON file"""
        metadata['last_updated'] = datetime.now().isoformat()
        with open(self.metadata_file, 'w') as f:
            json.dump(metadata, f, indent=2)

    def get_metadata(self) -> Dict:
        """Retrieve current metadata"""
        with open(self.metadata_file, 'r') as f:
            return json.load(f)

    def update_performance_metrics(self, metrics: Dict[str, float]) -> None:
        """Update performance metrics in metadata"""
        metadata = self.get_metadata()
        metadata['performance_metrics'] = metrics
        self.save_metadata(metadata)

    def cleanup_old_data(self, days_to_keep: int = 30) -> None:
        """Remove predictions older than specified days"""
        df = pd.read_csv(self.predictions_file)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        cutoff_date = pd.Timestamp.now() - pd.Timedelta(days=days_to_keep)
        df = df[df['timestamp'] >= cutoff_date]
        df.to_csv(self.predictions_file, index=False)